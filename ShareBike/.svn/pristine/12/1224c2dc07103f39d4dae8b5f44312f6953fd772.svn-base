package com.panda.sharebike.ui.ride;

import android.content.Context;
import android.content.Intent;
import android.support.v4.widget.SwipeRefreshLayout;
import android.support.v7.widget.LinearLayoutManager;
import android.view.View;
import android.widget.TextView;

import com.blankj.utilcode.constant.TimeConstants;
import com.blankj.utilcode.util.TimeUtils;
import com.github.jdsjlzx.ItemDecoration.LuDividerDecoration;
import com.github.jdsjlzx.interfaces.OnItemClickListener;
import com.github.jdsjlzx.interfaces.OnLoadMoreListener;
import com.github.jdsjlzx.recyclerview.LuRecyclerView;
import com.github.jdsjlzx.recyclerview.LuRecyclerViewAdapter;
import com.panda.sharebike.Config;
import com.panda.sharebike.R;
import com.panda.sharebike.api.Api;
import com.panda.sharebike.api.HttpResult;
import com.panda.sharebike.api.Nsubscriber;
import com.panda.sharebike.model.entity.ItineraryBean;
import com.panda.sharebike.ui.Iinterface.SubscriberListener;
import com.panda.sharebike.ui.base.BaseActivity;
import com.panda.sharebike.ui.base.ListBaseAdapter;
import com.panda.sharebike.ui.base.SuperViewHolder;
import com.panda.sharebike.util.AppUtil;

import java.util.ArrayList;

import butterknife.BindView;

/**
 * 我的行程
 */
public class ItineraryListActivity extends BaseActivity implements SwipeRefreshLayout.OnRefreshListener {

    /**
     * 每一页展示多少条数据
     */
    private static final int REQUEST_COUNT = 10;
    /**
     * 已经获取到多少条数据了
     */
    private static int mCurrentCounter = 0;
    private static int mCurrentpageSize = 0;

    @BindView(R.id.my_recycleView)
    LuRecyclerView mRecyclerView;
    @BindView(R.id.my_swipe_refresh_layout)
    SwipeRefreshLayout mSwipeRefreshLayout;
    private DataAdapter mDataAdapter = null;
    private LuRecyclerViewAdapter mLuRecyclerViewAdapter = null;
    private ItineraryBean item;

    @Override
    protected int getLayoutView() {
        return R.layout.activity_itinerary_list;
    }

    @Override
    protected void setUpView() {
        super.setUpView();
        initView();
    }

    private void initView() {
        //设置刷新时动画的颜色，可以设置4个
        if (mSwipeRefreshLayout != null) {
            mSwipeRefreshLayout.setProgressViewOffset(false, 0, AppUtil.dip2px(this, 48));
            mSwipeRefreshLayout.setColorSchemeResources(android.R.color.holo_blue_light, android.R.color.holo_red_light, android.R.color.holo_orange_light, android.R.color.holo_green_light);
            mSwipeRefreshLayout.setOnRefreshListener(this);
        }
        mDataAdapter = new DataAdapter(this);
        //setLayoutManager放在setAdapter之前配置
        mRecyclerView.setLayoutManager(new LinearLayoutManager(this));
        mLuRecyclerViewAdapter = new LuRecyclerViewAdapter(mDataAdapter);
        mRecyclerView.setAdapter(mLuRecyclerViewAdapter);
        LuDividerDecoration divider = new LuDividerDecoration.Builder(this, mLuRecyclerViewAdapter)
                .setHeight(R.dimen.default_divider_height)
                .setPadding(R.dimen.default_divider_padding)
                .setColorResource(R.color.split)
                .build();
        mRecyclerView.setHasFixedSize(true);
        mRecyclerView.addItemDecoration(divider);
        //recycleview点击事件
        mLuRecyclerViewAdapter.setOnItemClickListener(new OnItemClickListener() {//点击跳转到行程详情界面
            @Override
            public void onItemClick(View view, int position) {
                Intent intent = new Intent(ItineraryListActivity.this, RideEndActivity.class);
                intent.putExtra("ID", item.getItems().get(position).getId());//将对应位置订单传给另一个界面
                startActivity(intent);
            }
        });
        //recycleview的加载更多事件
        mRecyclerView.setOnLoadMoreListener(new OnLoadMoreListener() {
            @Override
            public void onLoadMore() {

            }
        });
        //设置底部加载颜色
        mRecyclerView.setFooterViewColor(R.color.colorAccent, R.color.dark, android.R.color.white);
        //设置底部加载文字提示
        mRecyclerView.setFooterViewHint("正在加载", "已经全部为你呈现了", "网络不给力啊，点击再试一次吧");

    }


    @Override
    public void onRefresh() {
        mCurrentCounter = 0;
        mSwipeRefreshLayout.setRefreshing(true);
        mRecyclerView.setRefreshing(true);//同时调用LuRecyclerView的setRefreshing方法
        getMyItineraryList(mCurrentCounter, mCurrentpageSize);
    }

    private void notifyDataSetChanged() {
        mLuRecyclerViewAdapter.notifyDataSetChanged();
    }

    private void addItems(ArrayList<ItineraryBean> list) {

        mDataAdapter.addAll(list);
        mCurrentCounter += list.size();

    }

    private class DataAdapter extends ListBaseAdapter<ItineraryBean> {

        public DataAdapter(Context context) {
            super(context);
        }

        @Override
        public int getLayoutId() {
            return R.layout.view_item_itinerary;
        }

        @Override
        public void onBindItemHolder(SuperViewHolder holder, int position) {
            item = mDataList.get(position);
            String startTime = null;
            int time = 0;
            try {
                //骑行开始时间
                startTime = TimeUtils.millis2String(item.getItems().get(position).getStartTime());
                long timeSpan = TimeUtils.getTimeSpan(item.getItems().get(position).getEndTime(), item.getItems().get(position).getStartTime(), TimeConstants.MIN);
                time = (int) (timeSpan / 60000);//获得分钟
            } catch (Exception e) {
                e.printStackTrace();
            }
            TextView item_time = holder.getView(R.id.tv_time);//时间
            TextView item_number = holder.getView(R.id.tv_number);//单车编号
            TextView item_money = holder.getView(R.id.tv_money);//花费的钱
            TextView item_paly_time = holder.getView(R.id.tv_play_time);//花费的时间
            item_time.setText(startTime);
            item_paly_time.setText(time + "");
            item_number.setText(item.getItems().get(position).getId());
            item_money.setText(item.getItems().get(position).getCost() + "");
        }

    }

    /**
     * 我的行程
     */
    private void getMyItineraryList(int pageNum, int pageSize) {
        Api.getInstance().getDefault().getRecords(Config.TOKEN, pageNum, pageSize)
                .subscribe(new Nsubscriber<HttpResult<ItineraryBean>>(new SubscriberListener<HttpResult<ItineraryBean>>() {
                    @Override
                    public void onSuccess(HttpResult<ItineraryBean> model) {
                        if (mSwipeRefreshLayout.isRefreshing()) {
                            mSwipeRefreshLayout.setRefreshing(false);
                        }
                        mRecyclerView.refreshComplete(REQUEST_COUNT);
                        mLuRecyclerViewAdapter.notifyDataSetChanged();
                    }

                    @Override
                    public void onFailure(String msg) {

                    }
                }, this, true));
    }
}

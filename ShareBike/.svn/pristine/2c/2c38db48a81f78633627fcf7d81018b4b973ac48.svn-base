package com.panda.sharebike.ui.unlock;

import android.content.Context;
import android.content.Intent;
import android.text.Editable;
import android.text.TextWatcher;
import android.view.KeyEvent;
import android.view.View;
import android.view.inputmethod.InputMethodManager;
import android.widget.EditText;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.TextView;

import com.orhanobut.logger.Logger;
import com.panda.sharebike.Config;
import com.panda.sharebike.R;
import com.panda.sharebike.api.Api;
import com.panda.sharebike.api.HttpResult;
import com.panda.sharebike.api.Nsubscriber;
import com.panda.sharebike.model.entity.RentBean;
import com.panda.sharebike.ui.Iinterface.SubscriberListener;
import com.panda.sharebike.ui.base.BaseActivity;

import butterknife.BindView;
import butterknife.OnClick;
import cn.bingoogolapple.qrcode.core.QRCodeView;
import cn.bingoogolapple.qrcode.zxing.ZXingView;
import rx.android.schedulers.AndroidSchedulers;
import rx.schedulers.Schedulers;

import static com.panda.sharebike.util.KeyboardUtil.showSoftInputFromWindow;

public class ManualUnlockActivity extends BaseActivity implements QRCodeView.Delegate, View.OnKeyListener {
    @BindView(R.id.scan_view)
    ZXingView scanView;
    @BindView(R.id.iv_title)
    ImageView ivTitle;
    @BindView(R.id.et1)
    EditText et1;
    @BindView(R.id.et2)
    EditText et2;
    @BindView(R.id.et3)
    EditText et3;
    @BindView(R.id.et4)
    EditText et4;
    @BindView(R.id.et5)
    EditText et5;
    @BindView(R.id.et6)
    EditText et6;
    @BindView(R.id.et7)
    EditText et7;
    @BindView(R.id.et8)
    EditText et8;
    @BindView(R.id.et9)
    EditText et9;
    @BindView(R.id.et10)
    EditText et10;
    @BindView(R.id.llayout_keyboard)
    LinearLayout llayoutKeyboard;
    @BindView(R.id.tv_input_alert)
    TextView tvInputAlert;
    @BindView(R.id.iv_scan)
    ImageView ivScan;
    @BindView(R.id.iv_light)
    ImageView ivLight;
    @BindView(R.id.tv_light)
    TextView tvLight;
    @BindView(R.id.llayout_bottom)
    LinearLayout llayoutBottom;

    @Override
    protected int getLayoutView() {
        return R.layout.activity_manual_unlock;
    }

    @Override
    protected void setUpView() {
        super.setUpView();
        scanView.setDelegate(this);

        et1.addTextChangedListener(new ManualUnlockActivity.ClassOfTextWatcher(et1));
        et2.addTextChangedListener(new ManualUnlockActivity.ClassOfTextWatcher(et2));
        et3.addTextChangedListener(new ManualUnlockActivity.ClassOfTextWatcher(et3));
        et4.addTextChangedListener(new ManualUnlockActivity.ClassOfTextWatcher(et4));
        et5.addTextChangedListener(new ManualUnlockActivity.ClassOfTextWatcher(et5));
        et6.addTextChangedListener(new ManualUnlockActivity.ClassOfTextWatcher(et6));
        et7.addTextChangedListener(new ManualUnlockActivity.ClassOfTextWatcher(et7));
        et8.addTextChangedListener(new ManualUnlockActivity.ClassOfTextWatcher(et8));
        et9.addTextChangedListener(new ManualUnlockActivity.ClassOfTextWatcher(et9));
        et10.addTextChangedListener(new ManualUnlockActivity.ClassOfTextWatcher(et10));

        et2.setOnKeyListener(this);
        et3.setOnKeyListener(this);
        et4.setOnKeyListener(this);
        et5.setOnKeyListener(this);
        et6.setOnKeyListener(this);
        et7.setOnKeyListener(this);
        et8.setOnKeyListener(this);
        et9.setOnKeyListener(this);
        et10.setOnKeyListener(this);
        showSoftInputFromWindow(ManualUnlockActivity.this, et1);
    }

    @Override
    public void onStart() {
        super.onStart();
        scanView.startCamera();
        scanView.showScanRect();
    }

    @Override
    protected void onResume() {
        super.onResume();
        scanView.startSpot();
    }

    @Override
    public void onStop() {
        scanView.stopCamera();
        super.onStop();
    }

    @Override
    protected void onDestroy() {
        if (scanView != null)
            scanView.onDestroy();
        super.onDestroy();
    }


    @OnClick({R.id.iv_scan, R.id.iv_light})
    public void onViewClicked(View view) {
        switch (view.getId()) {
            case R.id.iv_scan:
                startActivity(new Intent(this, ScanUnlockActivity.class));
                scanView.onDestroy();
                finish();
                break;
            case R.id.iv_light:
                if (ivLight.getTag() == null || ivLight.getTag().equals("close")) {
                    tvLight.setText("关闭手电筒");
                    scanView.openFlashlight();
                    ivLight.setTag("open");
                } else {
                    tvLight.setText("打开手电筒");
                    scanView.closeFlashlight();
                    ivLight.setTag("close");
                }
                break;
        }
    }

    @Override
    public void onScanQRCodeSuccess(String result) {

    }

    @Override
    public void onScanQRCodeOpenCameraError() {
        Logger.i("打开相机出错");
    }

    @Override
    public boolean onKey(View view, int i, KeyEvent keyEvent) {
        if (i == KeyEvent.KEYCODE_DEL && keyEvent.getAction() == KeyEvent.ACTION_DOWN) {
            if (view instanceof EditText && ((EditText) view).getText().toString().length() == 0) {
                switch (view.getId()) {
                    case R.id.et2:
                        et1.setText("");
                        showSoftInputFromWindow(ManualUnlockActivity.this, et1);
                        break;
                    case R.id.et3:
                        et2.setText("");
                        showSoftInputFromWindow(ManualUnlockActivity.this, et2);
                        break;
                    case R.id.et4:
                        et3.setText("");
                        showSoftInputFromWindow(ManualUnlockActivity.this, et3);
                        break;
                    case R.id.et5:
                        et4.setText("");
                        showSoftInputFromWindow(ManualUnlockActivity.this, et4);
                        break;
                    case R.id.et6:
                        et5.setText("");
                        showSoftInputFromWindow(ManualUnlockActivity.this, et5);
                        break;
                    case R.id.et7:
                        et6.setText("");
                        showSoftInputFromWindow(ManualUnlockActivity.this, et6);
                        break;
                    case R.id.et8:
                        et7.setText("");
                        showSoftInputFromWindow(ManualUnlockActivity.this, et7);
                        break;
                    case R.id.et9:
                        et8.setText("");
                        showSoftInputFromWindow(ManualUnlockActivity.this, et8);
                        break;
                    case R.id.et10:
                        et9.setText("");
                        showSoftInputFromWindow(ManualUnlockActivity.this, et9);
                        break;
                }
                return true;
            }
        }
        return false;
    }

    private class ClassOfTextWatcher implements TextWatcher {
        private TextView view;

        public ClassOfTextWatcher(View view) {
            if (view instanceof TextView)
                this.view = (TextView) view;
            else
                throw new ClassCastException(
                        "view must be an instance Of TextView");
        }

        @Override
        public void afterTextChanged(Editable s) {
        }

        @Override
        public void beforeTextChanged(CharSequence s, int start, int count, int after) {
            if (after == 1) {
                switch (view.getId()) {
                    case R.id.et1:
                        showSoftInputFromWindow(ManualUnlockActivity.this, et2);
                        break;
                    case R.id.et2:
                        showSoftInputFromWindow(ManualUnlockActivity.this, et3);
                        break;
                    case R.id.et3:
                        showSoftInputFromWindow(ManualUnlockActivity.this, et4);
                        break;
                    case R.id.et4:
                        showSoftInputFromWindow(ManualUnlockActivity.this, et5);
                        break;
                    case R.id.et5:
                        showSoftInputFromWindow(ManualUnlockActivity.this, et6);
                        break;
                    case R.id.et6:
                        showSoftInputFromWindow(ManualUnlockActivity.this, et7);
                        break;
                    case R.id.et7:
                        showSoftInputFromWindow(ManualUnlockActivity.this, et8);
                        break;
                    case R.id.et8:
                        showSoftInputFromWindow(ManualUnlockActivity.this, et9);
                        break;
                    case R.id.et9:
                        showSoftInputFromWindow(ManualUnlockActivity.this, et10);
                        break;
                    case R.id.et10:
                        et10.setFocusable(true);
                        et10.setFocusableInTouchMode(true);
                        InputMethodManager imm = (InputMethodManager) ManualUnlockActivity.this
                                .getSystemService(Context.INPUT_METHOD_SERVICE);
                        imm.hideSoftInputFromWindow(ManualUnlockActivity.this.getWindow().getDecorView().getWindowToken(), 0);
                        break;
                }
            }
        }

        @Override
        public void onTextChanged(CharSequence s, int start, int before, int count) {

        }

    }

    /**
     * 手动开锁
     *
     * @param bikeId
     */
    private void getHttpRent(String bikeId) {
        Api.getInstance().getDefault().getRent(Config.TOKEN, bikeId)
                .subscribeOn(Schedulers.io())
                .observeOn(AndroidSchedulers.mainThread())
                .subscribe(new Nsubscriber<HttpResult<RentBean>>(new SubscriberListener<HttpResult<RentBean>>() {
                    @Override
                    public void onSuccess(HttpResult<RentBean> model) {

                    }

                    @Override
                    public void onFailure(String msg) {

                    }
                }, this, true));
    }
}

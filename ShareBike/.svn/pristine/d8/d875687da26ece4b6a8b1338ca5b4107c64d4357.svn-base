package com.panda.sharebike.api;

import android.content.Context;

import com.orhanobut.logger.Logger;
import com.panda.sharebike.ui.Iinterface.ProgressCancelListener;
import com.panda.sharebike.ui.Iinterface.ProgressDialogHandler;
import com.panda.sharebike.ui.Iinterface.SubscriberListener;

import retrofit2.adapter.rxjava.HttpException;
import rx.Subscriber;

/**
 * author : 宁立森
 * e-mail : byning2012@163.com
 * time   : 2017/07/17
 * desc   :
 * version: 1.0
 */
public class Nsubscriber<T> extends Subscriber<T> implements ProgressCancelListener {

//    public void onSuccess(T model);
//
//    public void onFailure(String msg);
//
//   public abstract void onFinish();

    private SubscriberListener subscriberListener;

    private ProgressDialogHandler mProgressDialogHandler;

    private Context context;

    public Nsubscriber(SubscriberListener subscriberListener, Context context, boolean show) {
        this.subscriberListener = subscriberListener;
        this.context = context;
        // mProgressDialogHandler = new ProgressDialogHandler(context, this, true, show);
    }

    private void showProgressDialog() {
        if (mProgressDialogHandler != null) {
            mProgressDialogHandler.obtainMessage(ProgressDialogHandler.SHOW_PROGRESS_DIALOG).sendToTarget();
        }
    }

    private void dismissProgressDialog() {
        if (mProgressDialogHandler != null) {
            mProgressDialogHandler.obtainMessage(ProgressDialogHandler.DISMISS_PROGRESS_DIALOG).sendToTarget();
            mProgressDialogHandler = null;
        }
    }

    /**
     * 订阅开始时调用
     * 显示ProgressDialog
     */
    @Override
    public void onStart() {
        showProgressDialog();
    }

    /**
     * 完成，隐藏ProgressDialog
     */
    @Override
    public void onCompleted() {
        dismissProgressDialog();
    }

    @Override
    public void onError(Throwable e) {
        e.printStackTrace();
        dismissProgressDialog();
        if (e instanceof HttpException) {
            HttpException httpException = (HttpException) e;
            //httpException.response().errorBody().string()
            int code = httpException.code();
            String msg = httpException.getMessage();
            Logger.e("dandy", "code=" + code);
            if (code == 504) {
                msg = "网络不给力";
            }
            if (code == 502 || code == 404 || code == 406) {
                msg = "服务器异常，请稍后再试";
            }
            if (code == 401) {
                msg = "请重新登录";
            }
            if (code == 501) {
                msg = "请填写信息";
            }

            subscriberListener.onFailure(msg);
        }
//        } else {
//            subscriberListener.onFailure(e.getMessage());
//        }
//        if (e instanceof ConnectException) {
//            subscriberListener.onFailure("服务器异常");
//        }

        subscriberListener.onFailure(e.getMessage());
        Logger.e("dandy", "请求异常了 " + e.toString());

    }

    @Override
    public void onNext(T t) {
        if (HttpResult.class.isInstance(t)) {
            HttpResult httpResult = (HttpResult) t;
            Logger.e(httpResult.getCode() + "-0-");
//            if (401 == httpResult.getCode()) {
//                Intent intent = new Intent(context, LoginByPhoneActivity.class);
//
//            }
//            if (null == httpResult.getData() && "".equals(httpResult.getData())) {
//                subscriberListener.onFailure("返回数据为空");
//            }
//            if (httpResult.getCode() == 401) {
//                subscriberListener.onFailure("请先登录");
//            }
            if (subscriberListener != null) {
                subscriberListener.onSuccess(t);
            }
        }
//        if (subscriberListener != null) {
//            subscriberListener.onSuccess(t);
//        }
    }

    /**
     * 取消ProgressDialog的时候，取消对observable的订阅，同时也取消了http请求
     */
    @Override
    public void onCancelProgress() {
        if (!this.isUnsubscribed()) {
            this.unsubscribe();
        }
    }

}

package com.panda.sharebike.ui.selfinfo;

import android.app.Activity;
import android.app.AlertDialog;
import android.content.Intent;
import android.net.Uri;
import android.os.Build;
import android.os.Bundle;
import android.os.Environment;
import android.view.View;
import android.view.ViewGroup;
import android.view.WindowManager;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.RelativeLayout;
import android.widget.TextView;

import com.blankj.utilcode.util.EmptyUtils;
import com.blankj.utilcode.util.ToastUtils;
import com.jph.takephoto.app.TakePhotoActivity;
import com.jph.takephoto.model.TResult;
import com.orhanobut.logger.Logger;
import com.panda.sharebike.Config;
import com.panda.sharebike.R;
import com.panda.sharebike.api.Api;
import com.panda.sharebike.api.HttpResult;
import com.panda.sharebike.api.Nsubscriber;
import com.panda.sharebike.model.MessageEvent;
import com.panda.sharebike.model.entity.UserInfo;
import com.panda.sharebike.ui.Iinterface.SubscriberListener;
import com.panda.sharebike.ui.login.CertificationActivity;
import com.panda.sharebike.util.ImageLoaderUtils;

import org.greenrobot.eventbus.EventBus;
import org.greenrobot.eventbus.Subscribe;
import org.greenrobot.eventbus.ThreadMode;

import java.io.File;

import butterknife.BindView;
import butterknife.ButterKnife;
import butterknife.OnClick;
import okhttp3.MediaType;
import okhttp3.MultipartBody;
import okhttp3.RequestBody;
import rx.android.schedulers.AndroidSchedulers;
import rx.schedulers.Schedulers;

public class SelfInfoActivity extends TakePhotoActivity {

    @BindView(R.id.rl_certify)
    RelativeLayout rlCertify;
    private AlertDialog take_photo_dlg;//拍照dialog
    private Uri imageUri;
    @BindView(R.id.iv_avatar)
    ImageView ivAvatar;
    @BindView(R.id.tv_nickname)
    TextView tvNickname;
    @BindView(R.id.tv_name)
    TextView tvName;
    @BindView(R.id.tv_certify)
    TextView tvCertify;


    private static final int RESULT_SELFINFO_ACTIVITY = 1002;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_self_info);
        // setColor(this, R.color.tv_number_color);
        ButterKnife.bind(this);
        EventBus.getDefault().register(this);
        initView();
    }

    private void initView() {
        ButterKnife.bind(this);
        take_photo_dlg = new AlertDialog.Builder(this).create();
        getHttpMemberInfo();
    }

    /**
     * 设置状态栏颜色
     *
     * @param activity 需要设置的activity
     * @param color    状态栏颜色值
     */
    public static void setColor(Activity activity, int color) {
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT) {
            // 设置状态栏透明
            activity.getWindow().addFlags(WindowManager.LayoutParams.FLAG_TRANSLUCENT_STATUS);
            // 生成一个状态栏大小的矩形
            View statusView = createStatusView(activity, color);
            // 添加 statusView 到布局中
            ViewGroup decorView = (ViewGroup) activity.getWindow().getDecorView();
            decorView.addView(statusView);
            // 设置根布局的参数
            ViewGroup rootView = (ViewGroup) ((ViewGroup) activity.findViewById(android.R.id.content)).getChildAt(0);
            rootView.setFitsSystemWindows(true);
            rootView.setClipToPadding(true);
        }
    }

    /**
     * 生成一个和状态栏大小相同的矩形条
     *
     * @param activity 需要设置的activity
     * @param color    状态栏颜色值
     * @return 状态栏矩形条
     */
    private static View createStatusView(Activity activity, int color) {
        // 获得状态栏高度
        int resourceId = activity.getResources().getIdentifier("status_bar_height", "dimen", "android");
        int statusBarHeight = activity.getResources().getDimensionPixelSize(resourceId);

        // 绘制一个和状态栏一样高的矩形
        View statusView = new View(activity);
        LinearLayout.LayoutParams params = new LinearLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT,
                statusBarHeight);
        statusView.setLayoutParams(params);
        statusView.setBackgroundColor(color);
        return statusView;
    }
    @Override
    protected void onDestroy() {
        super.onDestroy();
        EventBus.getDefault().unregister(this);
    }

    //设置信息
    private void setMsgInfo(HttpResult<UserInfo> userInfo) {

        ImageLoaderUtils.displayRound(this, ivAvatar, userInfo.getData().getAvatar());
        tvNickname.setText(userInfo.getData().getNickname());
        tvName.setText(EmptyUtils.isEmpty(userInfo.getData().getRealname()) ? "未填写" : userInfo.getData().getRealname());
        if (userInfo.getData().isRealnameAuth()) {
            rlCertify.setEnabled(false);
            tvCertify.setText("已认证");
        } else {
            rlCertify.setEnabled(true);
            tvCertify.setText("未认证");
        }
    }

    @OnClick({R.id.iv_avatar, R.id.rl_nickname, R.id.rl_name, R.id.rl_certify, R.id.iv_left})
    public void onViewClicked(View view) {
        switch (view.getId()) {
            case R.id.iv_avatar:
                // getTakePhoto().onPickFromGallery();
                showTakePhotoDlg();
                break;
            case R.id.rl_nickname:
                startActivityForResult(new Intent(this, UserChangeNickNameActivity.class), RESULT_SELFINFO_ACTIVITY);
                break;
            case R.id.rl_name:
                //  startActivity(new Intent(this, UserChangeNameActivity.class));
                break;
            case R.id.rl_certify:
                startActivity(new Intent(this, CertificationActivity.class));
                break;
            case R.id.iv_left:
                Intent intent = new Intent();
                intent.putExtra("result", 1);
                SelfInfoActivity.this.setResult(RESULT_OK, intent);
                this.finish();
                break;
        }
    }

    @Subscribe(threadMode = ThreadMode.MAIN)
    public void onEvent(MessageEvent messageEvent) {
        if ("nickNameChangeSuccess".equals(messageEvent.getMessage())) {
            getHttpMemberInfo();
        }
    }
    //    @Override
//    protected void onActivityResult(int requestCode, int resultCode, Intent data) {
//        if (EmptyUtils.isNotEmpty(data)) {
//            int result = 0;
//            try {
//                result = data.getExtras().getInt("result", 0);
//            } catch (Exception e) {
//                e.printStackTrace();
//            }
//            if (2 == result) {
//                getHttpMemberInfo();
//            }
//        }
//    }

    /**
     * 设置文件存储路径，imageUri
     *
     * @return
     */
    private Uri getImgFile() {
        File file = new File(Environment.getExternalStorageDirectory(), "/temp/" + System.currentTimeMillis() + ".jpg");
        if (!file.getParentFile().exists()) file.getParentFile().mkdirs();
        imageUri = Uri.fromFile(file);
        return imageUri;

    }

    private void showTakePhotoDlg() {
        take_photo_dlg.show();
        take_photo_dlg.getWindow().setContentView(R.layout.dialog_photo_icon);
        take_photo_dlg.getWindow().findViewById(R.id.photo_source_photo_graph).setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                getTakePhoto().onPickFromGallery();
                if (take_photo_dlg != null) {
                    take_photo_dlg.dismiss();
                }
            }
        });//画廊
        take_photo_dlg.getWindow().findViewById(R.id.photo_source_taking_picture).setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                getTakePhoto().onPickFromCapture(getImgFile());
                if (take_photo_dlg != null) {
                    take_photo_dlg.dismiss();
                }
            }
        });//相册
    }

    @Override
    public void takeSuccess(TResult result) {
        super.takeSuccess(result);
        //  Logger.e(result.getImage().getOriginalPath() + "==============");
        ImageLoaderUtils.displayRound(this, ivAvatar, result.getImage().getOriginalPath());
        getHttpAvatar(result);
    }

    @Override
    public void takeFail(TResult result, String msg) {
        super.takeFail(result, msg);
        ToastUtils.showShort(msg);

    }

    @Override
    public void takeCancel() {
        super.takeCancel();

    }

    /**
     * 更改头像,图片上传
     * <p>
     * RequestBody requestBody = RequestBody.create(MediaType.parse("image/*"), file);
     */
    private void getHttpAvatar(TResult result) {

        File file = new File(result.getImage().getOriginalPath());//获得图片文件
        RequestBody requestFile = RequestBody.create(MediaType.parse("multipart/form-data"), file);//创建RequestBody，其中`multipart/form-data`为编码类型
        MultipartBody.Part part = MultipartBody.Part.createFormData("fileUpload", file.getName(), requestFile);

        Api.getInstance().getDefault().getAvatar(Config.TOKEN, part)
                .subscribeOn(Schedulers.io())
                .observeOn(AndroidSchedulers.mainThread())
                .subscribe(new Nsubscriber<HttpResult>(new SubscriberListener<HttpResult>() {
                    @Override
                    public void onSuccess(HttpResult model) {
                        Logger.e(model.getData().toString() + "=====图片地址");
                    }

                    @Override
                    public void onFailure(String msg) {
                        ToastUtils.showShort(msg);
                    }
                }, this, true));

    }

    /**
     * 获取会员信息
     */
    private void getHttpMemberInfo() {
        Api.getInstance().getDefault().getMemberInfo(Config.TOKEN)
                .subscribeOn(Schedulers.io())
                .observeOn(AndroidSchedulers.mainThread())
                .subscribe(new Nsubscriber<HttpResult<UserInfo>>(new SubscriberListener<HttpResult<UserInfo>>() {
                    @Override
                    public void onSuccess(HttpResult<UserInfo> model) {
                        if (model.isOk()) {
                            setMsgInfo(model);
                        }
                    }

                    @Override
                    public void onFailure(String msg) {
                        ToastUtils.showShort(msg);
                    }
                }, this, true));
    }


}
